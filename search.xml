<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>从零开始搭建spring boot脚手架（二）</title>
      <link href="/2018/12/13/cong-ling-kai-shi-da-jian-spring-boot-jiao-shou-jia-er/"/>
      <url>/2018/12/13/cong-ling-kai-shi-da-jian-spring-boot-jiao-shou-jia-er/</url>
      
        <content type="html"><![CDATA[<blockquote><p>spring boot相关的配置文件以及自定义配置的读取</p></blockquote><hr><h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><pre><code>首先在application.yml文件里尝试一发自定义配置：</code></pre><pre><code>my: name: wmy age: 25</code></pre><p>该如何读取这个配置呢？在spring boot中即可通过@Value注解来读取配置文件，试用一下：</p><pre><code> @Value(&quot;${my.name}&quot;)    public String name;    @Value(&quot;${my.age}&quot;)    public String age;    @GetMapping(&quot;/value&quot;)    public Object testValue(){        Map map=new HashMap&lt;&gt;();        map.put(&quot;name&quot;,name);        map.put(&quot;age&quot;,age);        return map;    }</code></pre><p>在浏览器输入相应访问路径：</p><pre><code>{name: &quot;wmy&quot;,age: &quot;25&quot;}</code></pre><p>如果配置过多，为了避免麻烦，我们可以将所有配置封装成一个实体类，这样每次要调用某个配置，我们只需实例化一个该类的对象即可。<br>yml文件配置如下：</p><pre><code>my: name: wmy age: 25 sex: 男 job: 软件工程师</code></pre><p>建立与之对应的实体类（为了省略get,set方法，此处用了lombok)：</p><pre><code>@ConfigurationProperties(prefix = &quot;my&quot;) // 这个注解将配置映射到实体类@Data@Component //不加，注入时显示无法注入，但是还是可以运行public class Person {    private String name;    private String age;    private String sex;    private String job;}</code></pre><p>测试：</p><pre><code>  @Autowired    private Person person;    @GetMapping(&quot;/value&quot;)    public Object testValue(){        Map map=new HashMap&lt;&gt;();        map.put(&quot;name&quot;,person.getName());        map.put(&quot;age&quot;,person.getAge());        map.put(&quot;sex&quot;,person.getSex());        map.put(&quot;job&quot;,person.getJob());        return map;    }</code></pre><p>访问效果：</p><pre><code>{sex: &quot;男&quot;,name: &quot;wmy&quot;,job: &quot;软件工程师&quot;,age: &quot;25&quot;}</code></pre><hr><h2 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h2><p>如果配置文件太多，你想单独新建配置文件来放特殊需求的配置也行。<br>在resources下创建配置配置文件test.properties</p><pre><code>com.test.name=wmycom.test.age=26com.test.sex=男com.test.job=软件工程师</code></pre><p>配置实体类：</p><pre><code>@Configuration //或者@Component都可以不加@ConfigurationProperties(prefix = &quot;com.test&quot;) // 这个注解将配置映射到实体类@PropertySource(value = &quot;classpath:test.properties&quot;,encoding = &quot;gbk&quot;) //encoding控制编码@Datapublic class Person {    private String name;    private String age;    private String sex;    private String job;}</code></pre><p>感觉@Configuration就是为了标记这个类为配置类，好像专门拿来标记配置类，大佬可以解释下？<br>百度了一下，@Configuration和@Component还是有很大区别的。以后有时间研究。</p><hr><h2 id="多环境配置文件"><a href="#多环境配置文件" class="headerlink" title="多环境配置文件"></a>多环境配置文件</h2><p> 如果你在相同优先级位置同时有application.properties和application.yml，那么application.yml里面的属性就会覆盖application.properties里的属性。所以，优先推荐使用yml格式的文件</p><p>多环境配置文件一般分为以下几种：</p><pre><code>application-test.yml：测试环境application-dev.yml：开发环境application-prod.yml：生产环境</code></pre><p>需要哪种直接在application.yml配置就行：</p><pre><code>spring:  profiles:    active: dev</code></pre><hr><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><ol><li>由于spring boot内置了tomcat，一般打包成了jar包</li></ol><pre><code>java -jar scaffold-0.0.1-SNAPSHOT.jarjava -jar scaffold-0.0.1-SNAPSHOT.jar --server.port=9090 可以用命令改变端口</code></pre><p>运行后，可以访问接口。<br>==打包后发现配置内不加@Configuration或者@Component无法获取配置==</p><ol start="2"><li>打成war需要做的配置（基于2.0以上）</li></ol><pre><code>        &lt;packaging&gt;jar&lt;/packaging&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;            &lt;scope&gt;provided&lt;/scope&gt;        &lt;/dependency&gt;</code></pre><ol start="3"><li>打包别名设置：</li></ol><pre><code>&lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;        &lt;finalName&gt;demo&lt;/finalName&gt; #设置成你想要的名字    &lt;/build&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> spring boot </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 脚手架，配置，打包 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>从零开始搭建spring boot脚手架（一）</title>
      <link href="/2018/12/12/cong-ling-kai-shi-da-jian-spring-boot-jiao-shou-jia-yi/"/>
      <url>/2018/12/12/cong-ling-kai-shi-da-jian-spring-boot-jiao-shou-jia-yi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>spring boot相关概念先请各位大佬自行百度下，有时间可以发个博客介绍下。</p></blockquote><hr><h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><pre><code>作者用idea开发，idea初始化spring boot项目，一般是最新稳定版。构建过程如下：</code></pre><pre><code>file-&gt;new-&gt;project-&gt;spring initialize-&gt;jdk版本-&gt;maven相关配置-&gt;选取依赖（首先选web,其它可以以后添加）</code></pre><p>   初始化后pom.xml：</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;        &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;    &lt;/parent&gt;    &lt;groupId&gt;com.siteqi.cn&lt;/groupId&gt;    &lt;artifactId&gt;scaffold&lt;/artifactId&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;    &lt;name&gt;scaffold&lt;/name&gt;    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;    &lt;properties&gt;        &lt;java.version&gt;1.8&lt;/java.version&gt;    &lt;/properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;    &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;    &lt;/build&gt;&lt;/project&gt;</code></pre><p>初始化后一般生成如下目录：</p><ul><li>main 主要放置项目启动类：项目名+Application eg：ScaffoldApplication。</li><li>test 主要放置项目启动测试类类。</li><li>resource 静态资源 最重要的是application.properties，你可以在这里配置所有配置，也可以用yml格式的配置文件。</li></ul><hr><h2 id="配置测试"><a href="#配置测试" class="headerlink" title="配置测试"></a>配置测试</h2><ol><li>建立一个controller包，创建以下测试类：</li></ol><pre><code>/** * 测试Controller * * @author wangmaoyu * @create 2018-12-12 22:38 **/@RestController@RequestMapping(&quot;/test&quot;)public class TestController {    @GetMapping(&quot;/hello&quot;)    public String hello(){        return &quot;这是我第一个spring boot项目！&quot;;    }}</code></pre><ol start="2"><li>application.yml配置如下：</li></ol><pre><code>server:  port: 8080</code></pre><ol start="3"><li>这样运行ScaffoldApplication启动类，启动成功后即可在浏览器中<a href="http://localhost:8080/test/hello访问接口，浏览器里显示：" target="_blank" rel="noopener">http://localhost:8080/test/hello访问接口，浏览器里显示：</a></li></ol><pre><code>这是我第一个spring boot项目！</code></pre><hr><h2 id="兴趣"><a href="#兴趣" class="headerlink" title="兴趣"></a>兴趣</h2><p>更改启动banner:<br>在resource创建banner.txt,启动后会将banner改为你在txt文件里的内容：<br>我修复改的：</p><pre><code>    _ooOoo_                  o8888888o                  88&quot; . &quot;88                  (| -_- |)                  O\  =  /O               ____/`---&#39;\____             .&#39;  \\|     |//  `.            /  \\|||  :  |||//  \           /  _||||| -:- |||||-  \           |   | \\\  -  /// |   |           | \_|  &#39;&#39;\---/&#39;&#39;  |   |           \  .-\__  `-`  ___/-. /         ___`. .&#39;  /--.--\  `. . __      .&quot;&quot; &#39;&lt;  `.___\_&lt;|&gt;_/___.&#39;  &gt;&#39;&quot;&quot;.     | | :  `- \`.;`\ _ /`;.`/ - ` : | |     \  \ `-.   \_ __\ /__ _/   .-` /  /======`-.____`-.___\_____/___.-`____.-&#39;======                   `=---=&#39;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^         佛祖保佑       永无BUG</code></pre><blockquote><p>由于工作原因和时间问题，以后可能碰到比较难研究的可能不会在日更。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> spring boot </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 脚手架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mac下搭建hexo博客</title>
      <link href="/2018/12/11/mac-xia-da-jian-hexo-bo-ke/"/>
      <url>/2018/12/11/mac-xia-da-jian-hexo-bo-ke/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Hexo，快速、简洁且高效的博客框架Hexo。本身拥有众多的主题，不同的主题可能拥有不同的功能，导航一般都包含有首页，标签，分类，归档，关于等，其它功能基于主题提供者的额外集成相关插件。至于选用什么主题，用户自行百度就好。</p></blockquote><hr><blockquote><p>Hexo貌似使用js搭建的（具体自行百度），作者本身前端能力水平有限就不去讲在Hexo上开发额外功能了。这篇文章主要讲如何在mac下搭建hexo,至于为什么不讲windows上搭建，我还没学会怎么在上面构建node和npm环境。（插一句，mac下开发是真的舒爽，不像微软会出现一大堆莫名奇怪的问题和卡顿。）</p></blockquote><hr><blockquote><p>另外，作者本身是菜鸟，写作不得当处欢迎各位大佬指出，我好及时修正。之所以写博客其实就是想把学习笔记复习下，让自己充分掌握好所学技能，也锻炼下自己的文字表达能力。<br>废话说了一大截，现在开始来操作吧。</p></blockquote><hr><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ol><li>首先检查时候安装了git和node.js（我是用brew安装，这个就自行百度吧）,终端输入一下命令。</li></ol><pre><code>node --v git --version</code></pre><ol start="2"><li>注册github账户，创建仓库，注意仓库名请以用户名命名，这样才能保证你后面能用<br> https://用户名.github.io/  如果要设置域名，需要去购买，域名备案，可以设但没必要，备案麻烦。</li></ol><pre><code>eg: https://x-code01.github.io/ 我的博客地址</code></pre><ol start="3"><li>配置SSH钥匙，保证github的连通性，后面自己的修改才能提交到github上。<pre><code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 遇到密码直接跳过cd .ssh然后把id_rsa.pub的内容复制出来贴到github用户setting里面的ssh秘钥即可ssh -T git@github.com 测试是否设置成功</code></pre></li></ol><hr><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><ol><li>安装Hexo</li></ol><pre><code>npm install -g hexonpm install hexo-deployer-git --save #这个东西才能运行部署命令hexo init #初始化，默认landscape的主题</code></pre><ol start="2"><li>hexo配置（_config.yml)</li></ol><pre><code>theme: 主题名 #这里配置主题，注意配置文件：后都有空格，另外需要下载其他主题，在thems目录下 git clone 主题仓库地址即可，除此外还在相应的主题目录下的配置文件的配置，一般主题提供者都会说明。# 配置仓库以及分支：deploy:  type: git #必须用git  repo: git@github.com:x-code01/x-code01.github.io.git #仓库地址  branch: master #分支</code></pre><ol start="3"><li>写博客</li></ol><pre><code>hexo new &quot;博客名&quot; # 会在根目录下的/source/_posts的生成相应的博客名.md文件，用markdown语法修改文件类容即可</code></pre><ol start="4"><li>部署</li></ol><pre><code>hexo clean #清空之前生成的缓存，类似maven cleanhexo g #打包，这个应该都懂hexo d  #同步到你的远程github仓库，就是发布的意思hexo s #发布到本地的4000端口上：localhost:4000即可访问</code></pre><hr><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>hexo s 本地发布测试访问老是报index.html（这不就是单页面应用吗？)，不要怀疑肯定是某个流程弄错了，仔细检查下就没啥问题了，至于哪些流程问题出错了，我也记不清了（这就是写博客的必要性，老年健忘症）。</p><hr><blockquote><p>可能文章写得不是够清楚明了，这就是第一篇，希望各位大佬和小白们谅解下。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>对象锁多生产者消费者模式</title>
      <link href="/2018/12/09/dui-xiang-suo-duo-sheng-chan-zhe-xiao-fei-zhe-mo-shi/"/>
      <url>/2018/12/09/dui-xiang-suo-duo-sheng-chan-zhe-xiao-fei-zhe-mo-shi/</url>
      
        <content type="html"><![CDATA[<h4 id="1、烤鸭资源"><a href="#1、烤鸭资源" class="headerlink" title="1、烤鸭资源"></a>1、烤鸭资源</h4><pre><code>package com.ssm.others;import java.util.concurrent.locks.Condition;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;/** * 烤鸭资源 * * @author wangmaoyu * @create 2017-11-14 23:23 **/public class KaoyaResource {    //烤鸭名字    private String name;    //初始数量    private int num=1;    //判断是否需要线程等待的标志    private boolean flag=false;    //创建对象锁    private Lock lock=new ReentrantLock();    //通过已有的锁获取两组监视器，一组监视生产者，一组监视消费者。    Condition producer_con = lock.newCondition();    Condition consumer_con = lock.newCondition();    /**     * 生产烤鸭     * @param name     */    public  void product(String name){        //先获取锁        lock.lock();    try{        while(flag){  //此时有烤鸭需等待            try {                producer_con.await();            } catch (InterruptedException e) {                e.printStackTrace();            }        }        this.name=name+num;        num++;        System.out.println(Thread.currentThread().getName()+&quot;生产了烤鸭&quot;+this.name);        flag=true;//有烤鸭候改变标志       consumer_con.signal();//唤醒消费线程    }finally {        lock.unlock();    }    }    /**     * 消费烤鸭     */    public  void consume(){        lock.lock();        try{            while(!flag){                try {                   consumer_con.await();                } catch (InterruptedException e) {                    e.printStackTrace();                }            }            System.out.println(Thread.currentThread().getName()+&quot;...消费了........&quot;+this.name);//消费烤鸭1            flag = false;            producer_con.signalAll();//通知生产者生产烤鸭        }finally {            lock.unlock();        }    }}</code></pre><hr><h4 id="2、生产者"><a href="#2、生产者" class="headerlink" title="2、生产者"></a>2、生产者</h4><pre><code>package com.ssm.others;/** * 生产者 * * @author wangmaoyu * @create 2017-11-14 23:40 **/public class Producer  implements  Runnable{    private KaoyaResource kaoyaResource;    public Producer(KaoyaResource kaoyaResource) {        this.kaoyaResource = kaoyaResource;    }    @Override    public void run() {        while (true){            kaoyaResource.product(&quot;北京烤鸭&quot;);        }    }}</code></pre><hr><h4 id="3、消费者"><a href="#3、消费者" class="headerlink" title="3、消费者"></a>3、消费者</h4><pre><code>package com.ssm.others;/** * 消费者 * * @author wangmaoyu * @create 2017-11-14 23:42 **/public class Consumer implements  Runnable {    private KaoyaResource kaoyaResource;    public Consumer(KaoyaResource kaoyaResource) {        this.kaoyaResource = kaoyaResource;    }    @Override    public void run() {    while(true){        kaoyaResource.consume();    }    }}</code></pre><hr><h4 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h4><pre><code>package com.ssm.others;/** * 测试 * * @author wangmaoyu * @create 2017-11-14 23:38 **/public class Test {    public static void main(String[] args) {        KaoyaResource kaoyaResource=new KaoyaResource();        Producer producer=new Producer(kaoyaResource);        Consumer consumer=new Consumer(kaoyaResource);        Thread t1=new Thread(producer);        Thread t2=new Thread(producer);        Thread t3=new Thread(consumer);        Thread t4=new Thread(consumer);        t1.start();        t2.start();        t3.start();        t4.start();    }}</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消费者模式 </tag>
            
            <tag> 对象锁 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS7下Tomcat启动慢的原因及解决方案</title>
      <link href="/2018/12/07/test/"/>
      <url>/2018/12/07/test/</url>
      
        <content type="html"><![CDATA[<hr>]]></content>
      
      
      <categories>
          
          <category> 云服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centOS </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/12/07/hello-world/"/>
      <url>/2018/12/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
